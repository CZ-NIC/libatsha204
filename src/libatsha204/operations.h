/*
 * libatsha204 is small library and set of tools for Amel ATSHA204 crypto chip
 *
 * Copyright (C) 2013 CZ.NIC, z.s.p.o. (http://www.nic.cz/)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef OPERATIONS_H
#define OPERATIONS_H

#include <stdbool.h>

/**
 * \file operations.h
 * \brief Implementation of a middle layer
 */

/*
 * Constants modifying Zone config parameter
 */
static const unsigned char IO_MEM_DATA = 2;
static const unsigned char IO_MEM_CONFIG = 0;
static const unsigned char IO_MEM_OTP = 1;
static const unsigned char IO_RW_ENC = 64;
static const unsigned char IO_RW_NON_ENC = 0;
static const unsigned char IO_RW_4_BYTES = 0;
static const unsigned char IO_RW_32_BYTES = 128; //10000000
static const unsigned char LOCK_CONFIG = 0;
static const unsigned char LOCK_DATA = 1;

/**
 * \brief Generate zone config parameter (Param1 in all read / write operations)
 * \return byte with configuration
 */
unsigned char get_zone_config(unsigned char io_mem, unsigned char io_enc, unsigned char io_cnt);

/**
 * \brief Generate lock config parameter (Param1 in lock operation)
 * \return byte with configuration
 */
unsigned char get_lock_config(unsigned char lock_what);
/**
 * \brief Get slot address according to slot number.
 * \note Slot number is in range 0--15.
 * \return slot address according to its ID
 */
unsigned char get_slot_address(unsigned char slot_number);
/**
 * \brief Generate packet for DevRev command
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \return raw packet for the chip
 */
unsigned char *op_dev_rev();
/**
 * \brief Parse answer from the chip
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \param packet Raw data received from the chip
 * \return device revision
 */
uint32_t op_dev_rev_recv(unsigned char *packet);

/**
 * \brief Generate packet for Random command
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \return raw packet for the chip
 */
unsigned char *op_random();
/**
 * \brief Parse answer from the chip
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \param packet Raw data received from the chip
 * \param [out] data Pointer that will be filled with allocated memory
 * \return status code
 */
int op_random_recv(unsigned char *packet, unsigned char *data);

/**
 * \brief Generate packet for Read command
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \param zone_config configuration of the command generated by get_zone_config()
 * \param address memory address for I/O operation
 * \return raw packet for the chip
 */
unsigned char *op_raw_read(unsigned char zone_config, unsigned char address);
/**
 * \brief Parse answer from the chip
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \param packet Raw data received from the chip
 * \param [out] data Pointer that will be filled with allocated memory
 * \return status code
 */
int op_raw_read_recv(unsigned char *packet, unsigned char *data);
/**
 * \brief Generate packet for Write command
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \param zone_config configuration of the command generated by get_zone_config()
 * \param address memory address for I/O operation
 * \param cnt size of data
 * \param data data to write
 * \return raw packet for the chip
 */
unsigned char *op_raw_write(unsigned char zone_config, unsigned char address, size_t cnt, unsigned char *data);
/**
 * \brief Parse answer from the chip
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \param packet Raw data received from the chip
 * \return status code
 */
int op_raw_write_recv(unsigned char *packet);
/**
 * \brief Generate packet for Nonce command
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \param cnt size of data
 * \param data data to write
 * \return raw packet for the chip
 */
unsigned char *op_nonce(size_t cnt, unsigned char *data);
/**
 * \brief Parse answer from the chip
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \param packet Raw data received from the chip
 * \return status code
 */
int op_nonce_recv(unsigned char *packet);
/**
 * \brief Generate packet for HMAC command
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \param address slot number with key specified for HMAC digest
 * \param use_sn_in_digest combine key and challenge with serial number
 * \return raw packet for the chip
 */
unsigned char *op_hmac(unsigned char address, bool use_sn_in_digest);
/**
 * \brief Parse answer from the chip
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \param packet Raw data received from the chip
 * \param [out] data Pointer that will be filled with allocated memory
 * \return status code
 */
int op_hmac_recv(unsigned char *packet, unsigned char *data);
/**
 * \brief Generate packet for MAC command
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \param address slot number with key specified for MAC digest
 * \param cnt size of challenge
 * \param data data of challenge to write
 * \param use_sn_in_digest combine key and challenge with serial number
 * \return raw packet for the chip
 */
unsigned char *op_mac(unsigned char address, size_t cnt, unsigned char *data, bool use_sn_in_digest);
/**
 * \brief Parse answer from the chip
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \param packet Raw data received from the chip
 * \param [out] data Pointer that will be filled with allocated memory
 * \return status code
 */
int op_mac_recv(unsigned char *packet, unsigned char *data);
/**
 * \brief Generate packet for abstract operation that can read serial number from config memory
 * \return raw packet for the chip
 */
unsigned char *op_serial_number();
/**
 * \brief Parse answer from the chip
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \param packet Raw data received from the chip
 * \param [out] data Pointer that will be filled with allocated memory
 * \return status code
 */
int op_serial_number_recv(unsigned char *packet, unsigned char *data);
/**
 * \brief Generate packet for Lock command
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \param lock_config configuration of the command generated by get_lock_config()
 * \param crc CRC checksum of expected data in memory
 * \return raw packet for the chip
 */
unsigned char *op_lock(unsigned char lock_config, const unsigned char *crc);
/**
 * \brief Parse answer from the chip
 * \note The meaning of packet format is documented in original ATSHA204 Datasheet
 * \param packet Raw data received from the chip
 * \return status code
 */
int op_lock_recv(unsigned char *packet);

#endif //OPERATIONS_H
